spring:
  application:
    name: catalog-service # 설정 서버에서 설정을 필터링하는 데 사용하는 애플리케이션의 이름
  lifecycle:
    timeout-per-shutdown-phase: 15s # 15초의 종료기간을 둔다.
  profiles:
    active: integration # CI 빌드 테스트 시 컨피그서버에서 테스트컨테이너 설정도 읽을 수 있게하기 위해 추가
  # 컨피스 서버 설정 ------------------------------------------------------------------------------
  config:
    import: "optional:configserver:"  # 가능하면 컨피그 서버에서 설정 데이터를 가져온다.
  cloud:
    config:
      uri: http://localhost:8888  # 설정 서버의 URL
      request-connect-timeout: 30000 # 30s, 설정 서버에 연결될 때까지 기다리는 시간(밀리초)
      request-read-timeout: 30000  # 30s, 설정 서버에서 설정 데이터를 읽을 때까지 기다리는 시간(밀리초)
      fail-fast: false # 설정 서버 연결 실패를 치명적 오류로 인식[true 여야지 재시도가 작동한다.]
      retry:
        max-attempts: 10 # 시도의 최대 횟수
        initial-interval: 1000  # 최초 재시도 지연시간(밀리초)
        max-interval: 5000  # 재시도 지연 최대 시간(밀리초)
        multiplier: 1.1 # 지연 시간 계산 승수
  # DB 설정 -----------------------------------------------------------------------------------
  datasource:
    username: user
    password: password
    url: jdbc:postgresql://localhost:5432/polardb_catalog
    # 연결 풀 설정 [데이터베이스를 엑세스 할때마다 연결을 새로 만드는 대신 이미 생성한 연결을 재사용한다.]
    hikari:
      connection-timeout: 2000  # 풀에서 연결 객체를 얻기 위해 기다려야 하는 최대 시간(밀리초)
      maximum-pool-size: 5      # 하카리CP 풀에 최대한으로 유지할 수 있는 연결 객체의 수

  # sql 스크립트에서 데이터베이스 스키마 초기화 [ 스프링부트가 제공하는 데이터 소스 초기화 기능 => 플라이웨이로 대체 ]
#  sql:
#    init:
#      mode: always



# 서버 설정 ------------------------------------------------------------------------------
server:
  port: 9001
  shutdown: graceful  # 우아한 종료 활성화
  tomcat:
    connection-timeout: 2s
    keep-alive-timeout: 15s
    threads:
      max: 50
      min-spare: 5

# 컨피그 서버 설정 ---------------------------------------------------------------------------
management:
  endpoints:
    web:
      exposure:
        include: refresh  # HTTP를 통해 /actuator/refresh 엔드포인트를 노출한다.[ 컨피그 서버 설정 가져와 새로 적용 ]

polar:
  greeting: Welcome to the local book catalog!  # 설정서버에도 정보가 있으면 설정서버 정보가 우선된다.