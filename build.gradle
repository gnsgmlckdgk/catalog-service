plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.1'
	id 'io.spring.dependency-management' version '1.1.5'
}

group = 'com.polarbookshop'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}


configurations {	// 프로젝트를 빌드할 때 그래들이 설정 프로세서를 사용하도록 설정
	compileOnly {
		extendsFrom annotationProcessor
	}
}

ext {
	set('springCloudVersion', "2023.0.2")
	set('testcontainersVersion', '1.17.3')	// 사용할 테스트컨테이너 버전을 지정한다.
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	implementation 'org.springframework.boot:spring-boot-starter-validation'	// 유효성검증
	testImplementation 'org.springframework.boot:spring-boot-starter-webflux'	// 웹플럭스

	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'	// 스프링 설정

	implementation 'org.springframework.cloud:spring-cloud-starter-config'	// 스프링 클라우드
	implementation 'org.springframework.retry:spring-retry'					// 스프링 리트라이
	implementation 'org.springframework.boot:spring-boot-starter-actuator'	// 스프링 엑츄에이터

	// DB
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'	// JDBC
	runtimeOnly 'org.postgresql:postgresql'	// 특정 의존성이 컴파일 시점에는 필요 없고, 애플리케이션 실행 시점에만 필요하는것을 정의
	testImplementation 'org.testcontainers:postgresql'	// PostgreSQL 데이터베이스에 대한 컨테이너 관리 기능을 제공한다.
	testImplementation 'org.testcontainers:junit-jupiter'	// 테스트컨테이너 JUNIT 지원
//	implementation 'org.flywaydb:flyway-core'	// 포스트그리SQL 14.4 버전은 플라이웨이 최신버전에서 안됨
	implementation 'org.flywaydb:flyway-core:9.16.3'

	// lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"	// 테스트컨테이너 의존성 관리를 위한 BOM
	}
}

bootRun {	// bootRun 명령어 실행 할 시
	//systemProperty 'spring.profiles.active', 'testdata,dev'	// testdata 프로파일 활성화[여러개 설정 가능]
	systemProperty 'spring.profiles.active', 'testdata'
}

bootBuildImage {	// 빌드팩을 사용해 OCI 이미지를 빌드하기 위한 스프링 부트 플러그인 작업
	imageName = "${project.name}"	// 빌드할 OCI 이미지의 이름. 이 이름을 그래들의 프로젝트 설정에서 정의한 이름과 같다. 버전 번호를 사용하지 않고 암묵적인 latest 태그를 사용한다.
	environment = ["BP_JVM_VERSION" : "17.*"]	// 이미지에 설치할 JVM 버전.

	// 컨테이너 저장소 연결을 설정하기 위한 섹션
	docker {
		publishRegistry {	// 컨테이너 저장소 인증을 설정하기 위한 섹션. 값은 그래들 속성을 통해 전달된다.
			username = project.findProperty("registryUsername")
			password = project.findProperty("registryToken")
			url = project.findProperty("registryUrl")
		}
	}
}


tasks.named('test') {
	useJUnitPlatform()
}